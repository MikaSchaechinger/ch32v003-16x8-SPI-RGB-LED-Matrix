#! 
:ivl_version "13.0 (devel)" "(s20221226-345-gc9548f033)";
:ivl_delay_selection "TYPICAL";
:vpi_time_precision - 12;
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\system.vpi";
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\vhdl_sys.vpi";
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\vhdl_textio.vpi";
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\v2005_math.vpi";
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\va_math.vpi";
:vpi_module "C:\Users\Mika\PROGRA~1\FPGA\LUSHAY~1\OSS-CA~1\OSS-CA~1\lib\ivl\v2009.vpi";
S_0000000004c09850 .scope package, "$unit" "$unit" 2 1;
 .timescale 0 0;
S_0000000004c099e0 .scope module, "Bank_Distributor_tb" "Bank_Distributor_tb" 3 4;
 .timescale -9 -12;
P_0000000004c09b70 .param/l "BANK_ADDR_BITS" 1 3 11, +C4<00000000000000000000000000000100>;
P_0000000004c09ba8 .param/l "BANK_DEPTH" 1 3 9, +C4<00000000000000000000000000001100>;
P_0000000004c09be0 .param/l "CHANNEL_BANDWIDTH" 1 3 7, +C4<00000000000000000000000000001000>;
P_0000000004c09c18 .param/l "CHANNEL_DEPTH" 1 3 8, +C4<00000000000000000000000000000100>;
P_0000000004c09c50 .param/l "CHANNEL_NUMBER" 1 3 6, +C4<00000000000000000000000000000011>;
P_0000000004c09c88 .param/l "GLOBAL_ADDR_BITS" 1 3 10, +C4<00000000000000000000000000000110>;
v00000000064fb8f0_0 .array/port v00000000064fb8f0, 0;
L_0000000006493540 .functor BUFZ 8, v00000000064fb8f0_0, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fb8f0_1 .array/port v00000000064fb8f0, 1;
L_00000000064943b0 .functor BUFZ 8, v00000000064fb8f0_1, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fb8f0_2 .array/port v00000000064fb8f0, 2;
L_0000000006493070 .functor BUFZ 8, v00000000064fb8f0_2, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fc570_0 .array/port v00000000064fc570, 0;
L_0000000006493a10 .functor BUFZ 8, v00000000064fc570_0, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fc570_1 .array/port v00000000064fc570, 1;
L_0000000006493700 .functor BUFZ 8, v00000000064fc570_1, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fc570_2 .array/port v00000000064fc570, 2;
L_0000000006493620 .functor BUFZ 8, v00000000064fc570_2, C4<00000000>, C4<00000000>, C4<00000000>;
v00000000064fb7b0_0 .array/port v00000000064fb7b0, 0;
L_0000000006494180 .functor BUFZ 4, v00000000064fb7b0_0, C4<0000>, C4<0000>, C4<0000>;
v00000000064fb7b0_1 .array/port v00000000064fb7b0, 1;
L_0000000006492eb0 .functor BUFZ 4, v00000000064fb7b0_1, C4<0000>, C4<0000>, C4<0000>;
v00000000064fb7b0_2 .array/port v00000000064fb7b0, 2;
L_00000000064929e0 .functor BUFZ 4, v00000000064fb7b0_2, C4<0000>, C4<0000>, C4<0000>;
v00000000064fc250_0 .array/port v00000000064fc250, 0;
L_0000000006493b60 .functor BUFZ 1, v00000000064fc250_0, C4<0>, C4<0>, C4<0>;
v00000000064fc250_1 .array/port v00000000064fc250, 1;
L_0000000006492ba0 .functor BUFZ 1, v00000000064fc250_1, C4<0>, C4<0>, C4<0>;
v00000000064fc250_2 .array/port v00000000064fc250, 2;
L_0000000006493380 .functor BUFZ 1, v00000000064fc250_2, C4<0>, C4<0>, C4<0>;
v00000000064fca70_0 .var "I_address_in", 5 0;
v00000000064fb850_0 .var "I_clk_in", 0 0;
v00000000064fb8f0 .array "I_data_in", 2 0, 7 0;
v00000000064fbad0 .array "O_address_out", 2 0, 3 0;
v00000000064fba30 .array "O_clk_out", 2 0, 0 0;
v00000000064fc7f0 .array "O_data_out", 2 0, 7 0;
S_0000000004bf2910 .scope begin, "$ivl_for_loop3" "$ivl_for_loop3" 3 40, 3 40 0, S_0000000004c099e0;
 .timescale -9 -12;
v0000000004c596f0_0 .var/2s "i", 31 0;
S_0000000004bf2aa0 .scope module, "dut" "Bank_Distributor" 3 26, 4 1 0, S_0000000004c099e0;
 .timescale -9 -12;
    .port_info 0 /INPUT 1 "I_clk_in";
    .port_info 1 /INPUT 24 "I_data_in";
    .port_info 2 /INPUT 6 "I_address_in";
    .port_info 3 /OUTPUT 24 "O_data_out";
    .port_info 4 /OUTPUT 12 "O_address_out";
    .port_info 5 /OUTPUT 3 "O_clk_out";
P_0000000004bf2c30 .param/l "BANK_ADDR_BITS" 1 4 22, +C4<00000000000000000000000000000100>;
P_0000000004bf2c68 .param/l "BANK_DEPTH" 0 4 4, +C4<00000000000000000000000000001100>;
P_0000000004bf2ca0 .param/l "BANK_INDEX_BITS" 1 4 23, +C4<00000000000000000000000000000010>;
P_0000000004bf2cd8 .param/l "CHANNEL_BANDWIDTH" 0 4 3, +C4<00000000000000000000000000001000>;
P_0000000004bf2d10 .param/l "CHANNEL_NUMBER" 0 4 2, +C4<00000000000000000000000000000011>;
P_0000000004bf2d48 .param/l "DEPTH_OFFSET" 1 4 24, +C4<00000000000000000000000000000100>;
P_0000000004bf2d80 .param/l "GLOBAL_ADDR_BITS" 1 4 21, +C4<00000000000000000000000000000110>;
v00000000064fced0_0 .net "I_address_in", 5 0, v00000000064fca70_0;  1 drivers
v00000000064fb030_0 .net "I_clk_in", 0 0, v00000000064fb850_0;  1 drivers
v00000000064fb990 .array "I_data_in", 2 0;
v00000000064fb990_0 .net v00000000064fb990 0, 7 0, L_0000000006493540; 1 drivers
v00000000064fb990_1 .net v00000000064fb990 1, 7 0, L_00000000064943b0; 1 drivers
v00000000064fb990_2 .net v00000000064fb990 2, 7 0, L_0000000006493070; 1 drivers
v00000000064fb7b0 .array "O_address_out", 2 0, 3 0;
v00000000064fc250 .array "O_clk_out", 2 0, 0 0;
v00000000064fc570 .array "O_data_out", 2 0, 7 0;
v00000000064fb670_0 .var "addr_in", 5 0;
v00000000064fc2f0_0 .var "addr_out_0", 3 0;
v00000000064fbcb0_0 .var "addr_out_1", 3 0;
v00000000064fc9d0_0 .var "addr_out_2", 3 0;
v00000000064fb0d0_0 .var/2s "channel_offset", 31 0;
v00000000064fb5d0_0 .var "data_in_0", 7 0;
v00000000064fbb70_0 .var "data_in_1", 7 0;
v00000000064fbc10_0 .var "data_in_2", 7 0;
v00000000064fb210_0 .var "data_out_0", 7 0;
v00000000064fbf30_0 .var "data_out_1", 7 0;
v00000000064fb710_0 .var "data_out_2", 7 0;
v00000000064fc6b0 .array/2s "new_channel", 2 0, 31 0;
E_00000000064a40a0/0 .event anyedge, v00000000064fb990_0, v00000000064fb990_1, v00000000064fb990_2, v00000000064fced0_0;
E_00000000064a40a0/1 .event anyedge, v00000000064fb7b0_0, v00000000064fb7b0_1, v00000000064fb7b0_2, v00000000064fc570_0;
E_00000000064a40a0/2 .event anyedge, v00000000064fc570_1, v00000000064fc570_2;
E_00000000064a40a0 .event/or E_00000000064a40a0/0, E_00000000064a40a0/1, E_00000000064a40a0/2;
E_00000000064a46e0/0 .event anyedge, v00000000064fced0_0, v00000000064fb990_0, v00000000064fb990_1, v00000000064fb990_2;
v00000000064fc6b0_0 .array/port v00000000064fc6b0, 0;
v00000000064fc6b0_1 .array/port v00000000064fc6b0, 1;
v00000000064fc6b0_2 .array/port v00000000064fc6b0, 2;
E_00000000064a46e0/1 .event anyedge, v00000000064fc6b0_0, v00000000064fc6b0_1, v00000000064fc6b0_2, v00000000064fb030_0;
E_00000000064a46e0 .event/or E_00000000064a46e0/0, E_00000000064a46e0/1;
S_0000000004c1fb70 .scope begin, "$ivl_for_loop2" "$ivl_for_loop2" 4 57, 4 57 0, S_0000000004bf2aa0;
 .timescale -9 -12;
v0000000004c59830_0 .var/2s "ch", 31 0;
    .scope S_0000000004bf2aa0;
T_0 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v00000000064fb0d0_0, 0, 32;
    %end;
    .thread T_0, $init;
    .scope S_0000000004bf2aa0;
T_1 ;
Ewait_0 .event/or E_00000000064a46e0, E_0x0;
    %wait Ewait_0;
    %load/vec4 v00000000064fced0_0;
    %pad/u 32;
    %cmpi/u 4, 0, 32;
    %jmp/0xz  T_1.0, 5;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v00000000064fb0d0_0, 0, 32;
    %jmp T_1.1;
T_1.0 ;
    %load/vec4 v00000000064fced0_0;
    %pad/u 32;
    %cmpi/u 8, 0, 32;
    %jmp/0xz  T_1.2, 5;
    %pushi/vec4 1, 0, 32;
    %store/vec4 v00000000064fb0d0_0, 0, 32;
    %jmp T_1.3;
T_1.2 ;
    %pushi/vec4 2, 0, 32;
    %store/vec4 v00000000064fb0d0_0, 0, 32;
T_1.3 ;
T_1.1 ;
    %fork t_1, S_0000000004c1fb70;
    %jmp t_0;
    .scope S_0000000004c1fb70;
t_1 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000000004c59830_0, 0, 32;
T_1.4 ; Top of for-loop 
    %load/vec4 v0000000004c59830_0;
    %cmpi/s 3, 0, 32;
    %jmp/0xz T_1.5, 5;
    %load/vec4 v0000000004c59830_0;
    %load/vec4 v00000000064fb0d0_0;
    %add;
    %pushi/vec4 3, 0, 32;
    %mod/s;
    %cast2;
    %ix/getv/s 4, v0000000004c59830_0;
    %store/vec4a v00000000064fc6b0, 4, 0;
    %ix/getv/s 4, v0000000004c59830_0;
    %load/vec4a v00000000064fb990, 4;
    %ix/getv/s 5, v0000000004c59830_0;
    %load/vec4a v00000000064fc6b0, 5;
    %ix/vec4/s 4;
    %store/vec4a v00000000064fc570, 4, 0;
    %load/vec4 v00000000064fced0_0;
    %pad/u 32;
    %ix/getv/s 4, v0000000004c59830_0;
    %load/vec4a v00000000064fc6b0, 4;
    %muli 4, 0, 32;
    %add;
    %pushi/vec4 12, 0, 32;
    %mod;
    %pad/u 4;
    %ix/getv/s 4, v0000000004c59830_0;
    %store/vec4a v00000000064fb7b0, 4, 0;
    %load/vec4 v00000000064fb030_0;
    %ix/getv/s 4, v0000000004c59830_0;
    %store/vec4a v00000000064fc250, 4, 0;
T_1.6 ; for-loop step statement
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000000004c59830_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000000004c59830_0, 0, 32;
    %jmp T_1.4;
T_1.5 ; for-loop exit label
    %end;
    .scope S_0000000004bf2aa0;
t_0 %join;
    %jmp T_1;
    .thread T_1, $push;
    .scope S_0000000004bf2aa0;
T_2 ;
Ewait_1 .event/or E_00000000064a40a0, E_0x0;
    %wait Ewait_1;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb990, 4;
    %store/vec4 v00000000064fb5d0_0, 0, 8;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb990, 4;
    %store/vec4 v00000000064fbb70_0, 0, 8;
    %ix/load 4, 2, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb990, 4;
    %store/vec4 v00000000064fbc10_0, 0, 8;
    %load/vec4 v00000000064fced0_0;
    %store/vec4 v00000000064fb670_0, 0, 6;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb7b0, 4;
    %store/vec4 v00000000064fc2f0_0, 0, 4;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb7b0, 4;
    %store/vec4 v00000000064fbcb0_0, 0, 4;
    %ix/load 4, 2, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fb7b0, 4;
    %store/vec4 v00000000064fc9d0_0, 0, 4;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fc570, 4;
    %store/vec4 v00000000064fb210_0, 0, 8;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fc570, 4;
    %store/vec4 v00000000064fbf30_0, 0, 8;
    %ix/load 4, 2, 0;
    %flag_set/imm 4, 0;
    %load/vec4a v00000000064fc570, 4;
    %store/vec4 v00000000064fb710_0, 0, 8;
    %jmp T_2;
    .thread T_2, $push;
    .scope S_0000000004c099e0;
T_3 ;
    %pushi/vec4 255, 0, 8;
    %ix/load 4, 0, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v00000000064fb8f0, 4, 0;
    %pushi/vec4 85, 0, 8;
    %ix/load 4, 1, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v00000000064fb8f0, 4, 0;
    %pushi/vec4 0, 0, 8;
    %ix/load 4, 2, 0;
    %flag_set/imm 4, 0;
    %store/vec4a v00000000064fb8f0, 4, 0;
    %fork t_3, S_0000000004bf2910;
    %jmp t_2;
    .scope S_0000000004bf2910;
t_3 ;
    %pushi/vec4 0, 0, 32;
    %store/vec4 v0000000004c596f0_0, 0, 32;
T_3.0 ; Top of for-loop 
    %load/vec4 v0000000004c596f0_0;
    %cmpi/s 12, 0, 32;
    %jmp/0xz T_3.1, 5;
    %load/vec4 v0000000004c596f0_0;
    %pad/s 6;
    %store/vec4 v00000000064fca70_0, 0, 6;
    %delay 1000, 0;
T_3.2 ; for-loop step statement
    ; show_stmt_assign_vector: Get l-value for compressed += operand
    %load/vec4 v0000000004c596f0_0;
    %pushi/vec4 1, 0, 32;
    %add;
    %cast2;
    %store/vec4 v0000000004c596f0_0, 0, 32;
    %jmp T_3.0;
T_3.1 ; for-loop exit label
    %end;
    .scope S_0000000004c099e0;
t_2 %join;
    %end;
    .thread T_3;
    .scope S_0000000004c099e0;
T_4 ;
    %vpi_call/w 3 49 "$dumpfile", "Bank_Distributor_tb.vcd" {0 0 0};
    %vpi_call/w 3 50 "$dumpvars", 32'sb00000000000000000000000000000000, S_0000000004c099e0 {0 0 0};
    %end;
    .thread T_4;
# The file index is used to find the file name in the following table.
:file_names 5;
    "N/A";
    "<interactive>";
    "-";
    "C:\Users\Mika\Programmieren\Projects\ch32v003-16x8-SPI-RGB-LED-Matrix\HDMI_to_Matrix_FPGA\HDMI_to_Matrix\src\c1_bank_distributor\Bank_Distributor_tb.sv";
    "C:\Users\Mika\Programmieren\Projects\ch32v003-16x8-SPI-RGB-LED-Matrix\HDMI_to_Matrix_FPGA\HDMI_to_Matrix\src\c1_bank_distributor\Bank_Distributor.sv";
