$date
	Sat Apr 19 00:00:15 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Double_Buffer_tb $end
$var wire 8 ! dout [7:0] $end
$var wire 1 " data_valid $end
$var parameter 32 # ADDRESS_DEPTH $end
$var parameter 32 $ BANDWIDTH $end
$var parameter 32 % BANK_COUNT $end
$var parameter 32 & BLOCK_COUNT $end
$var parameter 32 ' BLOCK_DATA_WIDTH $end
$var reg 1 ( clk_data_in $end
$var reg 1 ) clk_data_out $end
$var reg 1 * clka $end
$var reg 1 + clkb $end
$var reg 1 , rst_n $end
$var reg 1 - swap_trigger $end
$scope module dut $end
$var wire 1 ( clk_data_in $end
$var wire 1 ) clk_data_out $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 . din0 [7:0] $end
$var wire 1 / read_pulse $end
$var wire 1 , rst_n $end
$var wire 1 - swap_trigger $end
$var wire 1 0 write_pulse $end
$var wire 8 1 dout_buffer1 [7:0] $end
$var wire 8 2 dout_buffer0 [7:0] $end
$var parameter 32 3 ADDRESS_DEPTH $end
$var parameter 32 4 BANDWIDTH $end
$var parameter 32 5 BANK_COUNT $end
$var parameter 32 6 BLOCK_COUNT $end
$var parameter 32 7 BLOCK_DATA_WIDTH $end
$var reg 1 8 cea0 $end
$var reg 1 9 cea1 $end
$var reg 1 : ceb0 $end
$var reg 1 ; ceb1 $end
$var reg 2 < clk_data_in_d [1:0] $end
$var reg 2 = clk_data_out_d [1:0] $end
$var reg 1 " data_valid $end
$var reg 8 > dout_flat [7:0] $end
$var reg 1 ? write_buffer $end
$scope module buffer0 $end
$var wire 1 @ cea $end
$var wire 1 A ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 1 B oce $end
$var wire 1 C reseta $end
$var wire 1 D resetb $end
$var parameter 32 E ADDRESS_DEPTH $end
$var parameter 32 F BANDWIDTH $end
$var parameter 32 G BANK_COUNT $end
$var parameter 32 H BLOCK_COUNT $end
$var parameter 32 I BLOCK_DATA_WIDTH $end
$var reg 8 J dout_flat [7:0] $end
$scope begin bank_gen[0] $end
$var parameter 2 K bank $end
$scope module bank_inst $end
$var wire 3 L ada [2:0] $end
$var wire 3 M adb [2:0] $end
$var wire 1 @ cea $end
$var wire 1 A ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 N din [7:0] $end
$var wire 1 B oce $end
$var wire 1 C reseta $end
$var wire 1 D resetb $end
$var parameter 32 O ADDRESS_DEPTH $end
$var parameter 32 P BANDWIDTH $end
$var parameter 32 Q BLOCK_COUNT $end
$var parameter 32 R BLOCK_DATA_WIDTH $end
$var reg 8 S dout [7:0] $end
$scope begin block_gen[0] $end
$var parameter 2 T block $end
$scope module sdpb_inst $end
$var wire 3 U ada [2:0] $end
$var wire 3 V adb [2:0] $end
$var wire 1 @ cea $end
$var wire 1 A ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 W din [7:0] $end
$var wire 1 B oce $end
$var wire 1 C reseta $end
$var wire 1 D resetb $end
$var wire 8 X dout [7:0] $end
$var parameter 32 Y ADDRESS_DEPTH_A $end
$var parameter 32 Z ADDRESS_DEPTH_B $end
$var parameter 32 [ DATA_WIDTH_A $end
$var parameter 32 \ DATA_WIDTH_B $end
$scope module sim_inst $end
$var wire 3 ] ada [2:0] $end
$var wire 3 ^ adb [2:0] $end
$var wire 1 @ cea $end
$var wire 1 A ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 _ din [7:0] $end
$var wire 1 B oce $end
$var wire 1 C reseta $end
$var wire 1 D resetb $end
$var parameter 32 ` ADDRESS_DEPTH_A $end
$var parameter 32 a ADDRESS_DEPTH_B $end
$var parameter 32 b DATA_WIDTH_A $end
$var parameter 32 c DATA_WIDTH_B $end
$var parameter 32 d MEMORY_SIZE $end
$var parameter 32 e TOTAL_BITS $end
$var reg 8 f dout [7:0] $end
$var reg 8 g dout_next [7:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 h i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 i i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 j i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop9 $end
$var integer 32 k i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop11 $end
$var integer 32 l i [31:0] $end
$upscope $end
$upscope $end
$scope module buffer1 $end
$var wire 1 m cea $end
$var wire 1 n ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 1 o oce $end
$var wire 1 p reseta $end
$var wire 1 q resetb $end
$var parameter 32 r ADDRESS_DEPTH $end
$var parameter 32 s BANDWIDTH $end
$var parameter 32 t BANK_COUNT $end
$var parameter 32 u BLOCK_COUNT $end
$var parameter 32 v BLOCK_DATA_WIDTH $end
$var reg 8 w dout_flat [7:0] $end
$scope begin bank_gen[0] $end
$var parameter 2 x bank $end
$scope module bank_inst $end
$var wire 3 y ada [2:0] $end
$var wire 3 z adb [2:0] $end
$var wire 1 m cea $end
$var wire 1 n ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 { din [7:0] $end
$var wire 1 o oce $end
$var wire 1 p reseta $end
$var wire 1 q resetb $end
$var parameter 32 | ADDRESS_DEPTH $end
$var parameter 32 } BANDWIDTH $end
$var parameter 32 ~ BLOCK_COUNT $end
$var parameter 32 !" BLOCK_DATA_WIDTH $end
$var reg 8 "" dout [7:0] $end
$scope begin block_gen[0] $end
$var parameter 2 #" block $end
$scope module sdpb_inst $end
$var wire 3 $" ada [2:0] $end
$var wire 3 %" adb [2:0] $end
$var wire 1 m cea $end
$var wire 1 n ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 &" din [7:0] $end
$var wire 1 o oce $end
$var wire 1 p reseta $end
$var wire 1 q resetb $end
$var wire 8 '" dout [7:0] $end
$var parameter 32 (" ADDRESS_DEPTH_A $end
$var parameter 32 )" ADDRESS_DEPTH_B $end
$var parameter 32 *" DATA_WIDTH_A $end
$var parameter 32 +" DATA_WIDTH_B $end
$scope module sim_inst $end
$var wire 3 ," ada [2:0] $end
$var wire 3 -" adb [2:0] $end
$var wire 1 m cea $end
$var wire 1 n ceb $end
$var wire 1 * clka $end
$var wire 1 + clkb $end
$var wire 8 ." din [7:0] $end
$var wire 1 o oce $end
$var wire 1 p reseta $end
$var wire 1 q resetb $end
$var parameter 32 /" ADDRESS_DEPTH_A $end
$var parameter 32 0" ADDRESS_DEPTH_B $end
$var parameter 32 1" DATA_WIDTH_A $end
$var parameter 32 2" DATA_WIDTH_B $end
$var parameter 32 3" MEMORY_SIZE $end
$var parameter 32 4" TOTAL_BITS $end
$var reg 8 5" dout [7:0] $end
$var reg 8 6" dout_next [7:0] $end
$scope begin $ivl_for_loop4 $end
$var integer 32 7" i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop5 $end
$var integer 32 8" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop8 $end
$var integer 32 9" i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop9 $end
$var integer 32 :" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop11 $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop12 $end
$var integer 32 <" i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop13 $end
$var integer 32 =" i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000000 4"
b1000 3"
b1000 2"
b1000 1"
b1000 0"
b1000 /"
b1000 +"
b1000 *"
b1000 )"
b1000 ("
b0 #"
b1000 !"
b1 ~
b1000 }
b1000 |
b0 x
b1000 v
b1 u
b1 t
b1000 s
b1000 r
b1000000 e
b1000 d
b1000 c
b1000 b
b1000 a
b1000 `
b1000 \
b1000 [
b1000 Z
b1000 Y
b0 T
b1000 R
b1 Q
b1000 P
b1000 O
b0 K
b1000 I
b1 H
b1 G
b1000 F
b1000 E
b1000 7
b1 6
b1 5
b1000 4
b1000 3
b1000 '
b1 &
b1 %
b1000 $
b1000 #
$end
#0
$dumpvars
b0 ="
b0 <"
b1 ;"
b1 :"
b1 9"
b0 8"
b0 7"
b0 6"
bx 5"
b0 ."
b0 -"
b0 ,"
bx '"
b0 &"
b0 %"
b0 $"
bx ""
b0 {
b0 z
b0 y
bx w
1q
1p
1o
0n
0m
b1 l
b1 k
b1 j
b0 i
b0 h
b0 g
bx f
b0 _
b0 ^
b0 ]
bx X
b0 W
b0 V
b0 U
bx S
b0 N
b0 M
b0 L
bx J
1D
1C
1B
0A
0@
0?
bx >
b0 =
b0 <
1;
0:
09
18
bx 2
bx 1
00
0/
b0 .
0-
0,
0+
0*
0)
0(
0"
bx !
$end
#5000
1*
#7000
b0 !
b0 >
b0 2
b0 J
b1 l
b0 1
b0 w
b1 ;"
b0 S
b1 k
b0 ""
b1 :"
b0 X
b0 f
b0 '"
b0 5"
1+
#10000
0*
#14000
0+
#15000
1*
#20000
0C
0D
0p
0q
0*
1,
#21000
1+
#25000
1*
#28000
0+
#30000
0*
#35000
1@
10
b1 <
b10100000 W
b10100000 _
b1 j
b10100000 &"
b10100000 ."
b1 9"
1(
b10100000 N
b10100000 {
b10100000 .
1*
1+
#40000
0*
#42000
0+
#45000
0@
00
b10 <
b1 h
b1 <"
0(
1*
#49000
1+
#50000
0*
#55000
1@
10
b1 <
b10100001 W
b10100001 _
b1 j
b10100001 &"
b10100001 ."
b1 9"
1(
b10100001 N
b10100001 {
b10100001 .
b1 L
b1 U
b1 ]
b1 y
b1 $"
b1 ,"
1*
#56000
0+
#60000
0*
#63000
1+
#65000
0@
00
b10 <
b1 h
b10 <"
0(
1*
#70000
0*
0+
#75000
1@
10
b1 <
b10100010 W
b10100010 _
b1 j
b10100010 &"
b10100010 ."
b1 9"
1(
b10100010 N
b10100010 {
b10100010 .
b10 L
b10 U
b10 ]
b10 y
b10 $"
b10 ,"
1*
#77000
1+
#80000
0*
#84000
0+
#85000
0@
00
b10 <
b1 h
b11 <"
0(
1*
#90000
0*
#91000
1+
#95000
1@
10
b1 <
b10100011 W
b10100011 _
b1 j
b10100011 &"
b10100011 ."
b1 9"
1(
b10100011 N
b10100011 {
b10100011 .
b11 L
b11 U
b11 ]
b11 y
b11 $"
b11 ,"
1*
#98000
0+
#100000
0*
#105000
0@
00
b10 <
b1 h
b100 <"
0(
1*
1+
#110000
0*
#112000
0+
#115000
0;
1:
19
08
1"
1?
b0 <
1-
1*
#119000
1+
#120000
0*
#125000
0-
1*
#126000
0+
#130000
0*
#133000
1A
1/
b1 =
1)
1+
#135000
1*
#140000
0*
0+
#145000
1*
#147000
0A
0/
b10100000 g
b10 =
b1 i
0)
1+
#150000
0*
#154000
0+
#155000
1*
#160000
0*
#161000
b10100000 !
b10100000 >
b10100000 2
b10100000 J
b1 l
b10100000 S
b1 k
b0 =
b10100000 X
b10100000 f
b1 ="
1+
#165000
1*
#168000
0+
#170000
0*
#175000
1A
1/
b1 =
1)
b1 M
b1 V
b1 ^
b1 z
b1 %"
b1 -"
1*
1+
#180000
0*
#182000
0+
#185000
1*
#189000
0A
0/
b10100001 g
b10 =
b1 i
0)
1+
#190000
0*
#195000
1*
#196000
0+
#200000
0*
#203000
b10100001 !
b10100001 >
b10100001 2
b10100001 J
b1 l
b10100001 S
b1 k
b0 =
b10100001 X
b10100001 f
b10 ="
1+
#205000
1*
#210000
0*
0+
#215000
1*
#217000
1A
1/
b1 =
1)
b10 M
b10 V
b10 ^
b10 z
b10 %"
b10 -"
1+
#220000
0*
#224000
0+
#225000
1*
#230000
0*
#231000
0A
0/
b10100010 g
b10 =
b1 i
0)
1+
#235000
1*
#238000
0+
#240000
0*
#245000
b10100010 !
b10100010 >
b10100010 2
b10100010 J
b1 l
b10100010 S
b1 k
b0 =
b10100010 X
b10100010 f
b11 ="
1*
1+
#250000
0*
#252000
0+
#255000
1*
#259000
1A
1/
b1 =
1)
b11 M
b11 V
b11 ^
b11 z
b11 %"
b11 -"
1+
#260000
0*
#265000
1*
#266000
0+
#270000
0*
#273000
0A
0/
b10100011 g
b10 =
b1 i
0)
1+
#275000
1*
#280000
0*
0+
#285000
1*
#287000
b10100011 !
b10100011 >
b10100011 2
b10100011 J
b1 l
b10100011 S
b1 k
b0 =
b10100011 X
b10100011 f
b100 ="
1+
#290000
0*
#294000
0+
#295000
1*
#300000
0*
#301000
1+
#305000
1*
#307000
